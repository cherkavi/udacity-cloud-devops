AWSTemplateFormatVersion: '2010-09-09'

Description: >
    VPC, Public & Private Subnets, IGW & NAT.    

Parameters:

  VpcName:
    Type: String
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9\-]*'
    MinLength: 1
    MaxLength: 25
    Default: udacity-ht-03
    Description: prefix for all of elements in Stack

  VpcNetworkMask:
    Type: String
    AllowedPattern: '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\/[0-9]{1,2}'
    MinLength: 9
    MaxLength: 20
    Description: vpc network mask 
    Default: 10.0.0.0/16

  SubnetPublicNetworkMask:
    Type: String
    AllowedPattern: '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\/[0-9]{1,2}'
    MinLength: 9
    MaxLength: 20
    Description: vpc network mask 
    Default: 10.0.0.0/24

  SubnetPrivateNetworkMask1:
    Type: String
    AllowedPattern: '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\/[0-9]{1,2}'
    MinLength: 9
    MaxLength: 20
    Description: vpc network mask 
    Default: 10.0.1.0/24

  SubnetPrivateNetworkMask2:
    Type: String
    AllowedPattern: '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\/[0-9]{1,2}'
    MinLength: 9
    MaxLength: 20
    Description: vpc network mask 
    Default: 10.0.1.0/24

  Ec2KeyPairName:
    Description: Name of an existing EC2 KeyPair to enable SSH access into the WordPress web server
    Type: AWS::EC2::KeyPair::KeyName
    Default: cherkavi

# Warning: Don't use quotas/doublequotas for Resources.Type !!!
Resources:
  ### VPC 
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcNetworkMask
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value: !Ref VpcName

  ### IGW
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:   
      - Key: "Name"
        Value: !Sub "${VpcName}-igw"

  ## connection between IGW and VPC
  VPC2IGW:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref "VPC"
      InternetGatewayId: !Ref "InternetGateway"

  ## Elastic IP for NAT
  EIP:
    Type: AWS::EC2::EIP
    DependsOn: VPC2IGW
    Properties:
      Tags:
      - Key: Name
        Value: !Sub "${VPC}-eip"
      Domain: vpc

  ### Public Subnet 
  ## MapPublicIpOnLaunch - true
  SubnetPublic:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref SubnetPublicNetworkMask
      AvailabilityZone: !Select 
        - 0
        - !GetAZs 
          Ref: 'AWS::Region'
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: !Sub "${VpcName}-subnet-public"

  ### NAT
  NAT:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt EIP.AllocationId
      SubnetId: !Ref SubnetPublic
      Tags:
      - Key: Name
        Value: !Sub "${VPC}-nat"


  ### Private Subnet 1
  ## MapPublicIpOnLaunch - false
  ## need NAT for accessing internet via GWT
  SubnetPrivate1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref SubnetPrivateNetworkMask1
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      MapPublicIpOnLaunch: false
      Tags:
      - Key: Name
        Value: !Sub "${VpcName}-subnet-private-1"

  ### Private Subnet 2
  ## MapPublicIpOnLaunch - false
  ## need NAT for accessing internet via GWT
  SubnetPrivate2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref SubnetPrivateNetworkMask2
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      MapPublicIpOnLaunch: false
      Tags:
      - Key: Name
        Value: !Sub "${VpcName}-subnet-private-2"


  ### Routetables
  ## for public network
  RouteTablePublic:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref "VPC"
      Tags:
      - Key: Name
        Value: !Sub "${VpcName}-routetable-public"
  # binding RouteTable with Subnet 
  RT2SubNetPublic:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTablePublic
      SubnetId: !Ref SubnetPublic
  # Route for RouteTable, connect to IGW
  Route2Igw:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTablePublic
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGateway

  ## for private sub-network-1
  RouteTableSubnetPrivate1:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref "VPC"
      Tags:
      - Key: Name
        Value: !Sub '${VpcName}-routetable-private-1'
  # binding RouteTable with Subnet 
  RT2SubnetPrivate1:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref RouteTableSubnetPrivate1
      SubnetId: !Ref SubnetPrivate1
 # Route for RouteTable to NAT
  Route2Nat4Private1:
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId: !Ref RouteTableSubnetPrivate1
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId: !Ref NAT

  ## for private sub-network-2
  RouteTableSubnetPrivate2:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref "VPC"
      Tags:
      - Key: Name
        Value: !Sub '${VpcName}-routetable-private-2'
  # binding RouteTable with Subnet 
  RT2SubnetPrivate2:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref RouteTableSubnetPrivate2
      SubnetId: !Ref SubnetPrivate2
  # Route for RouteTable to NAT
  Route2Nat4Private2:
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId: !Ref RouteTableSubnetPrivate2
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId: !Ref NAT

Outputs:
  VPC:
    Description: created vpc
    Value: !Ref VPC
    Export:
      # !!! The Name field of Export must not depend on any resources,    
      Name: !Sub "${VpcName}"

  SubnetPublic:
    Description: created public subnet
    Value: !Ref SubnetPublic
    Export:
      # !ImportValue vpc-udacity-network-01-subnetpublic
      Name: !Sub "${VpcName}-subnetpublic"

  SubnetPrivate1:
    Description: created private subnet 1
    Value: !Ref SubnetPrivate1
    Export:
      Name: !Sub "${VpcName}-subnetprivate1"

  SubnetPrivate2:
    Description: created private subnet 2
    Value: !Ref SubnetPrivate2
    Export:
      Name: !Sub "${VpcName}-subnetprivate2"