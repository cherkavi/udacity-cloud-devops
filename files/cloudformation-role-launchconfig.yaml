AWSTemplateFormatVersion: '2010-09-09'

Description: >
    Role and LaunchConfiguration for LoadBalancer

Parameters:

  VpcName:
    Type: String
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9\-]*'
    MinLength: 1
    MaxLength: 25
    Default: udacity-ht-03
    Description: prefix for all of elements in Stack

  VpcNetworkMask:
    Type: String
    AllowedPattern: '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\/[0-9]{1,2}'
    MinLength: 9
    MaxLength: 20
    Description: vpc network mask 
    Default: 10.0.0.0/16

  Ec2KeyPair:
    Type: String
    Description: EC2 keypairs
    Default: cherkavi

  Ec2ImageId:
    Type: String
    Description: ami of the machine 
    # minimal accessible version of Ubuntu 20.04        
    Default: ami-0aa2b7722dc1b5612

  Ec2InstanceType:
    Type: String
    Description: EC2 instance type
    Default: t2.medium

  # Template format error: Every Default member must be a string.
  # VpcId:
  #   Type: String
  #   # Fn::ImportValue: !Sub "${VpcName}"
  #   Default: !ImportValue udacity-network-01

Resources:
  # Role with inline policy 
  # for EC2, ReadOnly access from S3 
  Role4EC2allowS3:
    Type: AWS::IAM::Role
    Properties:
      RoleName: "Ec2S3"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: "Allow"
          Principal:
            Service: "ec2.amazonaws.com"
          Action: "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: "S3RO"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
            - Effect: "Allow"
              Action:
                - s3:Get*
                - s3:List*
              Resource: "arn:aws:s3:::*/*"

  InstanceProfileRoles:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: InstanceProfileEC2
      Path: "/"
      Roles:
        - !Ref Role4EC2allowS3

  # SecurityGroup
  # Out:80, In: All
  SecurityGroupOut80InAll:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http
      # ----------------
      # > Value of property VpcId must be of type String
      # - Fn::ImportValue: "udacity-network-01"
      #^^^ !!! PLEASE, don't use minus-char before !!! 
      # ----------------
      # > Template format error: [/Resources/SecurityGroupOut80InAll/Properties/VpcId/0] map keys must be strings; received a map instead
      # - !Ref Fn::ImportValue: "udacity-network-01"
      # ----------------
      # > Template format error: [/Resources/SecurityGroupOut80InAll/Properties/VpcId/0/Fn::GetAtt/0] map keys must be strings; received a map instead
      # - Fn::GetAtt:
      #   - !Ref Fn::ImportValue: "udacity-network-01"
      #   - "Id"
      # ---------------
      # >  map keys must be strings; received a map instead
      # - Fn::Select:
      #   - 1
      #   - !Ref Fn::ImportValue: "udacity-network-01"
      VpcId: 
        Fn::ImportValue: !Sub "${VpcName}"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: -1
        FromPort: -1
        ToPort: -1
        CidrIp: 0.0.0.0/0

  # SecurityGroup
  # In:80, Out: 80
  SecurityGroupOut80In80:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http
      VpcId: 
        Fn::ImportValue: !Sub "${VpcName}"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: !Ref VpcNetworkMask

  # LaunchConfig
  # Server with inbound port 80
  LaunchConfigHttp:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Ref Ec2ImageId
      InstanceType: !Ref Ec2InstanceType
      SecurityGroups:
        - !Ref SecurityGroupOut80InAll
      KeyName: !Ref Ec2KeyPair
      UserData:
        Fn::Base64: |
          #!/bin/bash
          sudo apt-get update -y
          sudo apt-get install apache2 -y && sudo systemctl start apache2.service          
          echo "<html> <head><title>Udacity HT-03</title> </head> <body><h1>it works! Udagram, Udacity</h1></body> </html>" > /var/www/html/index.html
      BlockDeviceMappings:
        # root device
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 10
            VolumeType: gp2          
      # only one value is possible 
      IamInstanceProfile: !Ref InstanceProfileRoles

  TargetGroupHttp:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 15
      # Timeout must be smaller than Interval
      HealthCheckTimeoutSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      # should be more or equals 2
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 3
      VpcId:
        Fn::ImportValue: 
          !Sub "${VpcName}" 

Outputs:

  SecurityGroupOut80InAll:
    Value: !Ref SecurityGroupOut80InAll
    Export:
      Name: !Sub "${VpcName}-SecurityGroupOut80InAll"
    Description: security group in/80, out/*

  SecurityGroupOut80In80:
    Value: !Ref SecurityGroupOut80In80
    Export:
      Name: !Sub "${VpcName}-SecurityGroupOut80In80"
    Description: security group in/80, out/80

  Role4EC2allowS3:
    Value: !Ref Role4EC2allowS3
    Export:
      Name: !Sub "${VpcName}-Role4EC2allowS3"
    Description: Role for EC2, allow read from S3

  TargetGroupHttp:
    Value: !Ref TargetGroupHttp
    Export:
      Name: !Sub "${VpcName}-TargetGroupHttp"
    Description: for Listener & AutoScaling

  LaunchConfigHttp:
    Value: !Ref LaunchConfigHttp
    Export:
      Name: !Sub "${VpcName}-LaunchConfigHttp"
    Description: LaunchConfig for AutoScaling
